This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
scripts/
  translation/
    bundle.js
    config.js
    extract.js
    test-bundle.js
  blueprint-map.js
  bundle-assets.js
  bundle.ts
  schema.mjs
  upload.js
src/
  __mocks__/
    context.ts
  __tests__/
    mock.spec.ts
  common/
    definitions/
      objects.ts
    context.ts
    util.ts
  copy/
    atem-connection/
      index.ts
    rundown-editor/
      index.ts
    spreadsheet-gateway/
      index.ts
  generated/
    showStyle-config.ts
    studio-config.ts
  showstyle0/
    definitions/
      index.ts
      intermediate.ts
    executeActions/
      index.ts
    helpers/
      audio.ts
      clips.ts
      config.ts
      dve.ts
      graphics.ts
      metadata.ts
      script.ts
      sources.ts
      visionMixer.ts
    migrations/
      index.ts
      outputlayer-defaults.ts
      sourcelayer-defaults.ts
      triggered-actions-defaults.ts
      util.ts
      variants-defaults.ts
    part-adapters/
      camera.ts
      dve.ts
      gfx.ts
      index.ts
      remote.ts
      titles.ts
      vo.ts
      vt.ts
    rundown/
      baseline.ts
      globalActions.ts
      globalAdlibs.ts
      index.ts
    sofie-editor-parsers/
      base.ts
      camera.ts
      dve.ts
      gfx.ts
      index.ts
      invalid.ts
      remote.ts
      titles.ts
      vo.ts
      vt.ts
    spreadsheet-parsers/
      base.ts
      camera.ts
      dve.ts
      gfx.ts
      index.ts
      invalid.ts
      remote.ts
      titles.ts
      vo.ts
      vt.ts
    actionDefinitions.ts
    config-schema.json
    getAdlibItem.ts
    getSegment.ts
    getShowStyleVariantId.ts
    index.ts
    layers.ts
  studio0/
    helpers/
      config.ts
    migrations/
      devices.ts
      index.ts
      mappings-defaults.ts
      util.ts
    config-schema.json
    customTypes.ts
    getBaseline.ts
    getShowStyleId.ts
    index.ts
    layers.ts
  system/
    index.ts
  webpack.d.ts
.eslintrc.js
.repomixignore
package.json
tsconfig.build.json
tsconfig.json
webpack.config.js

================================================================
Files
================================================================

================
File: scripts/translation/bundle.js
================
/**
 * This script will read and bundle the translations in the project's .po files.
 * It is intended to be used by the Webpack config script.
 */
⋮----
class poToI18nextTransform extends stream.Transform {
⋮----
_transform(file, encoding, callback) {
const start = Date.now()
const language = file.dirname.split(/[/|\\]/).pop()
⋮----
readFile(file.path, 'utf-8')
.then((poFile) => {
⋮----
return gettextToI18next(
⋮----
Object.assign({}, conversionOptions, {
⋮----
// Keys with no value will fall back to default bundle, and eventually the key itself will
// be used as value if no values are found. Since we use the string as key, this means
// untranslated keys will be represented by their original (English) text. This is not great
// but better than inserting empty strings everywhere.
⋮----
.then(JSON.parse)
.then((data) => {
console.info(
`Processed ${namespace} ${language} (${Object.keys(data).length} translated keys) (${Date.now() - start} ms)`
⋮----
callback(null, {
⋮----
.catch(callback)
⋮----
function mergeByLanguage(translations) {
⋮----
Object.assign(languages[language], data)
⋮----
return Object.keys(languages).map((language) => ({ language, data: languages[language], type: 'i18next' }))
⋮----
async function getTranslations(translations) {
⋮----
out.push(translation)
⋮----
console.info('Translations bundling complete.')
⋮----
return mergeByLanguage(out)
⋮----
module.exports = async (entrypoints) => {
⋮----
.parse(entrypoints[entrypoint])
.dir.split(/[/|\\]/)
.pop()
namespaceFileNames.push(`locales/**/${bundleFolderName}.po`)
⋮----
console.info('Bundling translations...')
⋮----
const translations = vfs.src(namespaceFileNames).pipe(new poToI18nextTransform())
return await getTranslations(translations)

================
File: scripts/translation/config.js
================
functions: ['notifyUserWarning', 'notifyUserError'], // Array of functions to match

================
File: scripts/translation/extract.js
================
/**
 * This script will extract keys from the source code (provided they are wrapped
 * in a call to the (mock) i18next translation function t()).
 * The extracted keys are written to .po files, one for each specified locale.
 *
 * Translations in already existing .po files will be preserved.
 */
⋮----
const pipeline = require('util').promisify(stream.pipeline)
⋮----
class JsonToPoTransform extends stream.Transform {
⋮----
_transform(file, encoding, callback) {
const language = file.dirname.split(/[/|\\]/).pop()
⋮----
i18nextToPo(
⋮----
file.contents.toString(),
Object.assign({}, conversionOptions, {
⋮----
skipUntranslated: false, // when extracting no keys will have translations yet :)
⋮----
.then((poContent) => {
file.contents = Buffer.from(poContent)
⋮----
callback(null, file)
⋮----
.catch(callback)
⋮----
class MergeExistingTranslationsTransform extends stream.Transform {
⋮----
const poPath = path.format({
⋮----
readFile(poPath, 'utf-8')
.then(
⋮----
.then((existingFile) => {
⋮----
return gettextToI18next(
⋮----
// Keys with no value will fall back to default bundle, and eventually the key itself will
// be used as value if no values are found. Since we use the string as key, this means
// untranslated keys will be represented by their original (English) text. This is not great
// but better than inserting empty strings everywhere.
⋮----
.then(JSON.parse)
.then((existingTranslations) => {
⋮----
const currentKeys = Object.keys(JSON.parse(file.contents.toString()))
⋮----
this.statsCallback({
⋮----
return callback(null, file)
⋮----
const existingTranslationKeyCount = Object.keys(existingTranslations).length
⋮----
file.contents = Buffer.from(JSON.stringify(mergedTranslations))
⋮----
.catch((err) => {
callback(err)
⋮----
async function extract() {
for (const entryPointName of Object.keys(BlueprintEntrypoints)) {
const start = Date.now()
console.info(`\nExtracting keys from ${entryPointName}...`)
const entryPointRoot = path.parse(BlueprintEntrypoints[entryPointName]).dir
⋮----
await pipeline(
vfs.src([`${entryPointRoot}/**/*.ts`]),
new i18nTransform(Object.assign({}, extractOptions, { defaultNamespace: entryPointName })).on(
⋮----
new MergeExistingTranslationsTransform((stats) => {
⋮----
extractionStats.locales.push({ language, keysMerged, keysRemoved })
⋮----
new JsonToPoTransform(),
vfs.dest('./')
⋮----
.then(() => {
const taskDuration = Date.now() - start
⋮----
console.info(`=> OK, ${keysExtracted || 0} keys extracted in ${taskDuration} ms`)
⋮----
console.info(
⋮----
console.info(`=> No keys found in ${taskDuration}ms`)
⋮----
.catch(console.error)
⋮----
extract().catch(console.error)

================
File: scripts/translation/test-bundle.js
================
async function run() {
⋮----
console.log(bundle)
const translations = await getTranslations(GetEntrypointsForBundle(bundle))
console.log(JSON.stringify(translations))
⋮----
run().then(() => console.log('Done'))

================
File: scripts/blueprint-map.js
================
function GetEntrypointsForBundle(id) {
⋮----
return _.pick(BlueprintEntrypoints, ...bundle)

================
File: scripts/bundle-assets.js
================
const assets = Object.keys(compilation.assets).filter((v) => v.match(/\.(png|svg)?$/))
⋮----
assets.forEach((assetName) => {
⋮----
const data = asset.buffer().toString('base64')
⋮----
fs.mkdirSync('./dist')
⋮----
// It either already exists, or the write will fail with a useful error
⋮----
fs.writeFileSync('./dist/assets-bundle.json', JSON.stringify(assetPayload))

================
File: scripts/bundle.ts
================
import { BlueprintManifestSet } from '@sofie-automation/blueprints-integration'
⋮----
const { BlueprintBundles } = require('./blueprint-map') // eslint-disable-line @typescript-eslint/no-var-requires
const pWebpackConfig = require('../webpack.config.js') // eslint-disable-line @typescript-eslint/no-var-requires
⋮----
async function writeBundle(name: string, blueprints: BlueprintManifestSet): Promise<void>

================
File: scripts/schema.mjs
================
const PrettierConf = JSON.parse(
await fs.readFile('../../node_modules/@sofie-automation/code-standard-preset/.prettierrc.json')
⋮----
// convert showStyle-config options
⋮----
const schema = await compileFromFile('./src/showstyle0/config-schema.json', {
⋮----
await fs.writeFile('./src/generated/showStyle-config.ts', BANNER + '\n' + schema)
⋮----
console.error('Error while generating showStyle-config.json, continuing...')
console.error(e)
⋮----
// convert studio-config options
⋮----
const schema = await compileFromFile('./src/studio0/config-schema.json', {
⋮----
await fs.writeFile('./src/generated/studio-config.ts', BANNER + '\n' + schema)
⋮----
console.error('Error while generating studio-config.json, continuing...')
⋮----
})().catch(console.error)

================
File: scripts/upload.js
================
// TODO - allow include/exclude of certain blueprints
⋮----
const data = bundle ? bundle.buffer() : null
⋮----
console.log('Starting upload: ' + data.length + ' bytes to ' + id)
⋮----
const instance = axios.create({
httpsAgent: new https.Agent({
⋮----
.post(env.server + '/api/private/blueprints/restore/' + id, data, {
⋮----
.then(() => {
console.log(`Blueprints '${id}' uploaded`)
⋮----
.catch((e) => {
console.error(`Blueprints '${id}' upload failed:`, e.toString(), e.stack)
⋮----
// upload image assets
⋮----
fs.readFile('./dist/assets-bundle.json').then((payload) => {
⋮----
.post(env.server + '/api/private/blueprints/assets', payload, {
⋮----
console.log(`Blueprints assets uploaded`)
⋮----
console.error(`Blueprints assets upload failed:`, e.toString(), e.stack)
⋮----
//

================
File: src/__mocks__/context.ts
================
import {
	BlueprintMappings,
	ExtendedIngestRundown,
	IAsRunEventContext,
	IBlueprintAsRunLogEvent,
	IBlueprintExternalMessageQueueObj,
	IBlueprintPartDB,
	IBlueprintPartInstance,
	IBlueprintPieceInstance,
	IBlueprintRundownDB,
	IBlueprintSegmentDB,
	ICommonContext,
	IEventContext,
	IngestPart,
	IRundownContext,
	ISegmentUserContext,
	IShowStyleContext,
	IUserNotesContext,
} from '@sofie-automation/blueprints-integration'
⋮----
export function getHash(str: string): string
⋮----
return hash.update(str).digest('base64').replace(/[+/=]/g, '_') // remove +/= from strings, because they cause troubles
⋮----
export class CommonContext implements ICommonContext
⋮----
constructor(idPrefix: string)
public logDebug(message: string): void
⋮----
message // stop eslint complaining about unused arguments. The argument has to be there to implement the interface
⋮----
public logInfo(message: string): void
⋮----
message // stop eslint complaining about unused arguments. The argument has to be there to implement the interface
⋮----
public logWarning(message: string): void
⋮----
message // stop eslint complaining about unused arguments. The argument has to be there to implement the interface
⋮----
public logError(message: string): void
⋮----
message // stop eslint complaining about unused arguments. The argument has to be there to implement the interface
⋮----
public getHashId(origin: string, isNotUnique?: boolean): string
public unhashId(hash: string): string
⋮----
export enum NoteType {
	WARNING = 1,
	ERROR = 2,
}
⋮----
// copied from the core notes api
export interface ITranslatableMessage {
	/** the message key (we use literal strings in English as keys for now) */
	key: string
	/** arguments for the message template */
	args?: { [key: string]: any }
	/** namespace used */
	namespaces?: Array<string>
}
⋮----
/** the message key (we use literal strings in English as keys for now) */
⋮----
/** arguments for the message template */
⋮----
/** namespace used */
⋮----
export interface PartNote {
	type: NoteType
	origin: {
		name: string
		roId?: string
		segmentId?: string
		partId?: string
		pieceId?: string
	}
	message: ITranslatableMessage
}
⋮----
export class NotesContext extends CommonContext implements IUserNotesContext
⋮----
constructor(contextName: string, rundownId?: string, segmentId?: string, partId?: string)
notifyUserError(message: string, params?:
notifyUserWarning(message: string, params?:
⋮----
public _getNotes(): PartNote[]
⋮----
private _pushNote(type: NoteType, message: string, params?:
⋮----
// console.log(message)
⋮----
private _getLoggerName(): string
⋮----
function flattenParametrizedString(message: string, params?:
⋮----
export class LoggingNotesContext extends CommonContext implements IUserNotesContext
⋮----
constructor(id?: string)
⋮----
/** Throw Error and display message to the user in the GUI */
⋮----
/** Save note, which will be displayed to the user in the GUI */
⋮----
export class ShowStyleContext extends NotesContext implements IShowStyleContext
⋮----
constructor(contextName: string, mappings: BlueprintMappings, rundownId?: string)
public getStudioConfig(): unknown
public getStudioConfigRef(configKey: string): string
⋮----
return 'studio.mock.' + configKey // just a placeholder
⋮----
public getShowStyleConfig(): unknown
public getShowStyleConfigRef(configKey: string): string
⋮----
return 'showStyle.mock.' + configKey // just a placeholder
⋮----
public getStudioMappings(): BlueprintMappings
⋮----
export class RundownContext extends ShowStyleContext implements ISegmentUserContext, IRundownContext
⋮----
constructor(rundown: IBlueprintRundownDB, mappings: BlueprintMappings, contextName?: string)
⋮----
public getRuntimeArguments(_externalId: string): undefined
⋮----
export type SegmentContext = RundownContext
⋮----
export class EventContext extends CommonContext implements IEventContext
⋮----
// TDB: Certain actions that can be triggered in Core by the Blueprint
⋮----
getCurrentTime(): number
⋮----
export class AsRunEventContext extends RundownContext implements IAsRunEventContext, EventContext
⋮----
constructor(rundown: IBlueprintRundownDB, mappings: BlueprintMappings, asRunEvent: IBlueprintAsRunLogEvent)
public getCurrentTime(): number
public getAllAsRunEvents(): IBlueprintAsRunLogEvent[]
public getAllQueuedMessages(): IBlueprintExternalMessageQueueObj[]
public getSegments(): IBlueprintSegmentDB[]
public getSegment(id?: string): IBlueprintSegmentDB | undefined
public getParts(): IBlueprintPartDB[]
public getPartInstance(id?: string): IBlueprintPartInstance | undefined
public getPieceInstance(pieceInstanceId?: string): IBlueprintPieceInstance | undefined
public getPieceInstances(partInstanceId: string): IBlueprintPieceInstance[]
⋮----
return this.mockPieceInstances.filter((p) => (p as any).partInstanceId === partInstanceId) // TODO - tidy up this?
⋮----
/** Get the ingest data related to the rundown */
public getIngestDataForRundown(): ExtendedIngestRundown | undefined
public getIngestDataForPartInstance(_partInstance: IBlueprintPartInstance): IngestPart | undefined
/** Get the ingest data related to a part */
public getIngestDataForPart(_part: IBlueprintPartDB): IngestPart | undefined
public formatDateAsTimecode(time: number): string
public formatDurationAsTimecode(time: number): string

================
File: src/__tests__/mock.spec.ts
================


================
File: src/common/definitions/objects.ts
================
import { SpreadsheetIngestPiece } from '../../copy/spreadsheet-gateway'
⋮----
export type SomeObject =
	| CameraObject
	| VideoObject
	| GraphicObject
	| SplitObject
	| OverlayObject
	| LightsObject
	| TransitionObject
	| RemoteObject
	| PipObject
	| VoiceoverObject
	| ScriptObject
	| StudioGuestObject
⋮----
export type SomeAdlibPiece = VideoObject | GraphicObject
⋮----
export enum ObjectType {
	Camera = 'camera',
	Video = 'video',
	Graphic = 'graphic',
	Split = 'split',
	Overlay = 'overlay',
	Lights = 'lights',
	Transition = 'transition',
	Remote = 'remote',
	Pip = 'pip',
	Voiceover = 'voiceover',
	Script = 'script',
	StudioGuest = 'guest',
}
⋮----
export interface BaseObject extends SpreadsheetIngestPiece {
	isAdlib?: boolean
	isStudioMon?: boolean
}
⋮----
export interface CameraObject extends BaseObject {
	objectType: ObjectType.Camera
	attributes: {
		name: string
	}
}
export interface VideoObject extends BaseObject {
	objectType: ObjectType.Video
	adlibVariant?: string
}
export interface GraphicObject extends BaseObject {
	objectType: ObjectType.Graphic
	attributes: {
		name: string
		description: string // TODO - need to allow undefined here..
		location?: string
		text?: string
	}
	adlibVariant?: string
}
⋮----
description: string // TODO - need to allow undefined here..
⋮----
export interface SplitObject extends BaseObject {
	objectType: ObjectType.Split
	attributes: {
		layout: string
		input1: string
		input2: string
	}
}
export interface OverlayObject extends BaseObject {
	objectType: ObjectType.Overlay
}
export interface LightsObject extends BaseObject {
	objectType: ObjectType.Lights
}
export interface TransitionObject extends BaseObject {
	objectType: ObjectType.Transition
	attributes: {
		type: string
	}
}
export interface RemoteObject extends BaseObject {
	objectType: ObjectType.Remote
	attributes: {
		source: string
	}
}
export interface PipObject extends BaseObject {
	objectType: ObjectType.Pip
}
export interface VoiceoverObject extends BaseObject {
	objectType: ObjectType.Voiceover
}
export interface ScriptObject extends BaseObject {
	objectType: ObjectType.Script
}
⋮----
export interface StudioGuestObject extends BaseObject {
	objectType: ObjectType.StudioGuest
	attributes: {
		count: number
	}
}

================
File: src/common/context.ts
================
import {
	BlueprintMappings,
	IBlueprintSegmentRundown,
	IOutputLayer,
	ISegmentUserContext,
	IShowStyleContext,
	ISourceLayer,
	PackageInfo,
} from '@sofie-automation/blueprints-integration'
⋮----
export function isPartContext(context: IShowStyleContext): context is PartContext
⋮----
export class PartContext implements ISegmentUserContext
⋮----
constructor(baseContext: ISegmentUserContext, externalId: string)
getShowStyleSourceLayers(): Record<string, ISourceLayer | undefined>
getShowStyleOutputLayers(): Record<string, IOutputLayer | undefined>
⋮----
public getPackageInfo(_packageId: string): PackageInfo.Any[]
⋮----
public async hackGetMediaObjectDuration(mediaId: string): Promise<number | undefined>
⋮----
public getRuntimeArguments(_externalId: string): undefined
⋮----
/** IShowStyleConfigContext */
public getShowStyleConfig(): unknown
public getShowStyleConfigRef(configKey: string): string
⋮----
/** IStudioContext */
public getStudioMappings(): Readonly<BlueprintMappings>
⋮----
/** IStudioConfigContext */
public getStudioConfig(): unknown
public getStudioConfigRef(configKey: string): string
⋮----
/** IUserNotesContext */
public notifyUserError(message: string, params?:
public notifyUserWarning(message: string, params?:
public notifyUserInfo(message: string, params?:
⋮----
/** ICommonContext */
public getHashId(originString: string, originIsNotUnique?: boolean): string
public unhashId(hash: string): string
⋮----
/** Log a message to the sofie log with level 'debug' */
public logDebug(message: string): void
/** Log a message to the sofie log with level 'info' */
public logInfo(message: string): void
/** Log a message to the sofie log with level 'warn' */
public logWarning(message: string): void
/** Log a message to the sofie log with level 'error' */
public logError(message: string): void

================
File: src/common/util.ts
================
import {
	IBlueprintPiece,
	IRundownContext,
	IRundownUserContext,
	IShowStyleContext,
	IShowStyleUserContext,
	ITranslatableMessage,
	PieceLifespan,
} from '@sofie-automation/blueprints-integration'
import type { SetRequired } from 'type-fest'
⋮----
export type ThisOrThat<T extends boolean, A, B> = T extends true ? A : B
⋮----
export function literal<T>(o: T): T
⋮----
export function t(key: string, args?:
⋮----
export function createVirtualPiece<TPieceMetadata>(
	layer: string,
	outputLayer: string,
	start: number | IBlueprintPiece['enable'],
	lifespan: PieceLifespan,
	metadata: TPieceMetadata,
	mainPiece?: IBlueprintPiece<TPieceMetadata>
): SetRequired<IBlueprintPiece<TPieceMetadata>, 'privateData'>
⋮----
export type OptionalExceptFor<T, TRequired extends keyof T> = Partial<T> & Pick<T, TRequired>
⋮----
export function omit<T, P extends keyof T>(obj: T, ...props: P[]): Omit<T, P>
// export function ToObject<T>(vals: Array<[string, T]>): { [key: string]: T } {
// 	return _.object(vals)
// }
⋮----
export function isNotUndefined<T>(v: T | undefined): v is T
⋮----
export function flatten<T>(vals: Array<T[] | undefined>): T[]
⋮----
export function uniq<T>(vals: T[]): T[]
⋮----
export function pick<T, P extends keyof T>(obj: T, props: P[]): Pick<T, P>
⋮----
export function assertUnreachable(_never: never): never
⋮----
export function assertNever(_never: never): void
⋮----
// Do nothing. This is a type guard
⋮----
export function asRundownContext(context: IShowStyleContext): IRundownContext | undefined
⋮----
export function asRundownUserContext(context: IShowStyleUserContext): IRundownUserContext | undefined
⋮----
export function normalizeArray<T>(array: T[], indexKey: keyof T):
⋮----
export function normalizeArrayToMap<T, K extends keyof T>(array: T[], indexKey: K): Map<T[K], T>
⋮----
/** Temporary helper to handle the 'now' value when we know we don't expect it to be there */
export function unwrapStart(value: number | 'now'): number
⋮----
export function changeExtension(fileName: string, newExt: string): string
⋮----
export function stripExtension(fileName: string): string

================
File: src/copy/atem-connection/index.ts
================
// eslint-disable-next-line @typescript-eslint/no-namespace
⋮----
export enum SuperSourceArtOption {
		Background,
		Foreground,
	}
⋮----
export enum BorderBevel {
		None = 0,
		InOut = 1,
		In = 2,
		Out = 3,
	}
⋮----
export interface SuperSourceBox {
	enabled: boolean
	source: number
	x: number
	y: number
	size: number
	cropped: boolean
	cropTop: number
	cropBottom: number
	cropLeft: number
	cropRight: number
}
⋮----
export interface SuperSourceProperties {
	artFillSource: number
	artCutSource: number
	artOption: Enum.SuperSourceArtOption
	artPreMultiplied: boolean
	artClip: number
	artGain: number
	artInvertKey: boolean
}
⋮----
export interface SuperSourceBorder {
	borderEnabled: boolean
	borderBevel: Enum.BorderBevel
	borderOuterWidth: number
	borderInnerWidth: number
	borderOuterSoftness: number
	borderInnerSoftness: number
	borderBevelSoftness: number
	borderBevelPosition: number
	borderHue: number
	borderSaturation: number
	borderLuma: number
	borderLightSourceDirection: number
	borderLightSourceAltitude: number
}
⋮----
export interface SuperSource {
	readonly index: number
	readonly boxes: [
		SuperSourceBox | undefined,
		SuperSourceBox | undefined,
		SuperSourceBox | undefined,
		SuperSourceBox | undefined
	]
	properties?: SuperSourceProperties
	border?: SuperSourceBorder
}

================
File: src/copy/rundown-editor/index.ts
================
import { IngestPart, IngestSegment } from '@sofie-automation/blueprints-integration'
⋮----
export interface EditorIngestRundown {
	externalId: string
	name: string // namnet på sheeten
	expectedStart: number // unix time
	expectedEnd: number // unix time
}
⋮----
name: string // namnet på sheeten
expectedStart: number // unix time
expectedEnd: number // unix time
⋮----
export interface DecoratedEditorIngestSegment extends IngestSegment {
	payload: EditorIngestSegment
}
export interface EditorIngestSegment {
	rundownId: string
	externalId: string // unique within the parent runningOrder
	rank: number
	name: string
	float: boolean
}
⋮----
externalId: string // unique within the parent runningOrder
⋮----
export interface DecoratedEditorIngestPart extends IngestPart {
	payload: EditorIngestPart
}
export interface EditorIngestPart {
	segmentId: string
	externalId: string // unique within the parent section
	rank: number
	name: string
	type: string //  Assume we want this
	duration?: number
	// type: string
	float: boolean
	script: string

	pieces: EditorIngestPiece[]
}
⋮----
externalId: string // unique within the parent section
⋮----
type: string //  Assume we want this
⋮----
// type: string
⋮----
export interface EditorIngestPiece {
	id: string
	objectType: string
	objectTime: number
	duration: number
	clipName: string
	attributes: {
		[key: string]: string | number | boolean | undefined
	}
	script?: string
	transition?: string
}

================
File: src/copy/spreadsheet-gateway/index.ts
================
import { IngestPart, IngestSegment } from '@sofie-automation/blueprints-integration'
⋮----
export interface SpreadsheetIngestRundown {
	externalId: string
	name: string // namnet på sheeten
	expectedStart: number // unix time
	expectedEnd: number // unix time
}
⋮----
name: string // namnet på sheeten
expectedStart: number // unix time
expectedEnd: number // unix time
⋮----
export interface DecoratedSpreadsheetIngestSegment extends IngestSegment {
	payload: SpreadsheetIngestSegment
}
export interface SpreadsheetIngestSegment {
	rundownId: string
	externalId: string // unique within the parent runningOrder
	rank: number
	name: string
	float: boolean
}
⋮----
externalId: string // unique within the parent runningOrder
⋮----
export interface DecoratedSpreadsheetIngestPart extends IngestPart {
	payload: SpreadsheetIngestPart
}
export interface SpreadsheetIngestPart {
	segmentId: string
	externalId: string // unique within the parent section
	rank: number
	name: string
	type: string //  Assume we want this
	// type: string
	float: boolean
	script: string

	pieces: SpreadsheetIngestPiece[]
}
⋮----
externalId: string // unique within the parent section
⋮----
type: string //  Assume we want this
// type: string
⋮----
export interface SpreadsheetIngestPiece {
	id: string
	objectType: string
	objectTime: number
	duration: number
	clipName: string
	attributes: {
		[key: string]: string | number | boolean | undefined
	}
	script?: string
	transition?: string
}

================
File: src/generated/showStyle-config.ts
================
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run "yarn generate-schema-types" to regenerate this file.
 */
⋮----
export interface ShowStyleConfig {
	dvePresets: {
		[k: string]: DVELayoutConfig
	}
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "".
 */
export interface DVELayoutConfig {
	name: string
	boxes: number
	preset: string
}

================
File: src/generated/studio-config.ts
================
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run "yarn generate-schema-types" to regenerate this file.
 */
⋮----
export interface StudioConfig {
	visionMixerType: 'atem' | 'vmix'
	atemSources: {
		[k: string]: InputConfig
	}
	atemOutputs: {
		[k: string]: OutputConfig
	}
	vmixSources: {
		[k: string]: VmixInputConfig
	}
	sisyfosSources: {
		[k: string]: SiyfosSourceConfig
	}
	previewRenderer: string
	casparcgLatency: number
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "".
 */
export interface InputConfig {
	input: number
	type: string
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "".
 */
export interface OutputConfig {
	output: number
	source: number
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "".
 */
export interface VmixInputConfig {
	input: number
	type: string
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "".
 */
export interface SiyfosSourceConfig {
	source: number
	type: string
}

================
File: src/showstyle0/definitions/index.ts
================
import { ITranslatableMessage } from '@sofie-automation/blueprints-integration'
import { GraphicObject, SomeObject } from '../../common/definitions/objects'
import { ClipProps } from '../helpers/clips'
import { RawSourceInfo } from '../helpers/sources'
import { IntermediatePart, IntermediateSegment } from './intermediate'
⋮----
export enum SegmentType {
	NORMAL = 'normal',
	OPENING = 'opening',
}
⋮----
export enum PartType {
	// UNKNOWN = '',
	Invalid = 'invalid',
	Camera = 'camera',
	Remote = 'remote',
	VT = 'vt',
	VO = 'vo',
	Titles = 'titles',
	DVE = 'dve',
	GFX = 'gfx',
}
⋮----
// UNKNOWN = '',
⋮----
export enum PartInfo {
	NORMAL = 0,
}
⋮----
export type AllProps = CameraProps | RemoteProps | VTProps | VOProps | TitlesProps | DVEProps | GfxProps | InvalidProps
⋮----
export interface PartProps<T extends AllProps> extends IntermediatePart {
	type: PartType | null
	rawType: string
	rawTitle: string
	info: PartInfo
	payload: T
	objects: SomeObject[]
}
⋮----
export interface SegmentProps extends IntermediateSegment {
	type: SegmentType | null
	parts: PartProps<AllProps>[]
	payload: {
		name: string
	}
}
⋮----
export interface PartBaseProps {
	externalId: string
	duration: number
	name: string
	script?: string
}
⋮----
export interface CameraProps extends PartBaseProps {
	input: RawSourceInfo
}
⋮----
export interface TitlesProps extends PartBaseProps {
	variant: string
}
⋮----
export interface RemoteProps extends PartBaseProps {
	input: RawSourceInfo
}
⋮----
export interface VTProps extends PartBaseProps {
	clipProps: ClipProps
}
⋮----
export interface VOProps extends PartBaseProps {
	clipProps: ClipProps
}
⋮----
export interface DVEProps extends PartBaseProps {
	layout: string
	inputs: Array<RawSourceInfo | ClipProps>
}
⋮----
export interface GfxProps extends PartBaseProps {
	graphic: GraphicObject
}
⋮----
export interface InvalidProps extends PartBaseProps {
	invalidReason: ITranslatableMessage
}

================
File: src/showstyle0/definitions/intermediate.ts
================
export interface IntermediatePart {
	type: string | null
	payload: any
}
⋮----
export interface IntermediateSegment {
	type: string | null
	parts: IntermediatePart[]
	payload: any
}

================
File: src/showstyle0/executeActions/index.ts
================
import {
	ActionUserData,
	BlueprintPlayoutPersistentStore,
	IActionExecutionContext,
} from '@sofie-automation/blueprints-integration'
import { ActionId } from '../actionDefinitions'
import { SourceLayer } from '../layers'
⋮----
export async function executeAction(
	context: IActionExecutionContext,
	playoutPersistentState: BlueprintPlayoutPersistentStore<unknown>,
	actionId0: string,
	userData: ActionUserData,
	triggerMode?: string,
	privateData?: unknown,
	publicData?: unknown,
	actionOptions?: { [key: string]: any }
): Promise<void>
⋮----
async function executeLastOnSourceLayer(context: IActionExecutionContext, sourceLayer: SourceLayer)
⋮----
// const partInstance = context.getPartInstance('current')
⋮----
start: 'now' as const, // scrap timing

================
File: src/showstyle0/helpers/audio.ts
================
import { TSR } from '@sofie-automation/blueprints-integration'
import { assertNever, literal } from '../../common/util'
import { AudioSourceType, StudioConfig } from '../../studio0/helpers/config'
import { SisyfosLayers } from '../../studio0/layers'
import { TimelineBlueprintExt } from '../../studio0/customTypes'
⋮----
// note - studio baseline and showstyle baseline are the same for now
export function getSisyfosBaseline(config: StudioConfig): (TSR.SisyfosChannelOptions &
⋮----
const addChannelsFromType = (type: AudioSourceType)
⋮----
function getOverridePriorityByLayer(layer: SisyfosLayers)
⋮----
function getSisyfosPrimary(
	config: StudioConfig,
	primaries: { type: AudioSourceType; index: number; isOn?: boolean }[]
): (TSR.SisyfosChannelOptions &
⋮----
export function getAudioObjectOnLayer(
	config: StudioConfig,
	layer: SisyfosLayers,
	primaries: { type: AudioSourceType; index: number; isOn?: boolean }[]
): TimelineBlueprintExt<TSR.TimelineContentSisyfosChannels>
⋮----
export function getAudioPrimaryObject(
	config: StudioConfig,
	primaries: { type: AudioSourceType; index: number; isOn?: boolean }[]
): TimelineBlueprintExt<TSR.TimelineContentSisyfosChannels>

================
File: src/showstyle0/helpers/clips.ts
================
import { IBlueprintAdLibPiece, PieceLifespan, TSR } from '@sofie-automation/blueprints-integration'
import { ObjectType, SomeObject, VideoObject } from '../../common/definitions/objects'
import { assertUnreachable, literal } from '../../common/util'
import { SourceType, StudioConfig, VisionMixerType } from '../../studio0/helpers/config'
import { CasparCGLayers } from '../../studio0/layers'
import { getOutputLayerForSourceLayer, SourceLayer } from '../layers'
import { createVisionMixerObjects } from './visionMixer'
import { TimelineBlueprintExt } from '../../studio0/customTypes'
⋮----
export interface ClipProps {
	fileName: string
	duration?: number
	sourceDuration?: number
}
⋮----
export function parseClipProps(object: VideoObject): ClipProps
⋮----
export function parseClipEditorProps(object: VideoObject): ClipProps
⋮----
export function getClipPlayerInput(config: StudioConfig): StudioConfig['atemSources'][any] | undefined
⋮----
export function clipToAdlib(config: StudioConfig, clipObject: VideoObject): IBlueprintAdLibPiece
⋮----
export function parseClipsFromObjects(config: StudioConfig, objects: SomeObject[]): IBlueprintAdLibPiece[]

================
File: src/showstyle0/helpers/config.ts
================
import { IShowStyleContext, IShowStyleUserContext } from '@sofie-automation/blueprints-integration'
import { SuperSource } from '../../copy/atem-connection'
import { BlueprintConfig as BlueprintConfigBase, getStudioConfig } from '../../studio0/helpers/config'
import { ShowStyleConfig as ShowStyleConfig0 } from '../../generated/showStyle-config'
⋮----
export interface BlueprintConfig extends BlueprintConfigBase {
	showStyle: Readonly<ShowStyleConfig>
	dvePresets: { name: string; boxes: number; preset: SuperSource }[]
}
⋮----
export type ShowStyleConfig = ShowStyleConfig0
⋮----
export function parseConfig(context: IShowStyleContext | IShowStyleUserContext): BlueprintConfig

================
File: src/showstyle0/helpers/dve.ts
================
import {
	IShowStyleContext,
	SourceLayerType,
	SplitsContent,
	SplitsContentBoxContent,
	SplitsContentBoxProperties,
	TSR,
} from '@sofie-automation/blueprints-integration'
import { literal } from '../../common/util'
import { SourceType, StudioConfig } from '../../studio0/helpers/config'
import { DVEProps } from '../definitions'
import { getClipPlayerInput } from './clips'
import { parseConfig } from './config'
import { getSourceInfoFromRaw } from './sources'
⋮----
export type DVELayout = TSR.SuperSourceBox[]
⋮----
export enum DVELayouts {
	TwoBox,
}
⋮----
source: 1000, // bars
⋮----
// note: this sits behind box1, so don't crop it to ensure there is no gap between
⋮----
export function parseSuperSourceProps(
	context: IShowStyleContext,
	partProps: DVEProps
): TSR.TimelineContentAtemSsrcProps['ssrcProps']
⋮----
export function parseSuperSourceLayout(context: IShowStyleContext, partProps: DVEProps): TSR.SuperSourceBox[]
⋮----
export function dveLayoutToContent(
	config: StudioConfig,
	ssrcLayout: TSR.TimelineContentAtemSsrc['ssrc'],
	allBoxes: DVEProps['inputs']
): Pick<SplitsContent, 'boxSourceConfiguration'>
⋮----
function boxSource(
		info: DVEProps['inputs'][any],
		atemBox: TSR.SuperSourceBox | undefined
): SplitsContentBoxContent & SplitsContentBoxProperties

================
File: src/showstyle0/helpers/graphics.ts
================
import { IBlueprintAdLibPiece, IBlueprintPiece, PieceLifespan, TSR } from '@sofie-automation/blueprints-integration'
import { GraphicObject, ObjectType, SomeObject } from '../../common/definitions/objects'
import { literal } from '../../common/util'
import { StudioConfig } from '../../studio0/helpers/config'
import { CasparCGLayers } from '../../studio0/layers'
import { getOutputLayerForSourceLayer, SourceLayer } from '../layers'
import { getClipPlayerInput } from './clips'
import { createVisionMixerObjects } from './visionMixer'
import { TimelineBlueprintExt } from '../../studio0/customTypes'
⋮----
export interface GraphicsResult {
	pieces: IBlueprintPiece[]
	adLibPieces: IBlueprintAdLibPiece[]
}
⋮----
function getGraphicSourceLayer(object: GraphicObject): SourceLayer
function getGraphicTlLayer(object: GraphicObject): CasparCGLayers
⋮----
function getGraphicTlObject(config: StudioConfig, object: GraphicObject, isAdlib?: boolean): TimelineBlueprintExt[]
⋮----
start: 0, // TODO - this might not be quite right
⋮----
function parseGraphic(config: StudioConfig, object: GraphicObject): IBlueprintPiece
⋮----
.join(', ')}`, // todo - add info
⋮----
// ToDo: This was the old way of doing it, but it doesn't work in R53:
// payload: {
// 	content: {
// 		...object.attributes,
// 		adlib: undefined,
// 	},
// 	manifest: '',
// 	template: {
// 		event: '',
// 		layer: '',
// 		name: object.clipName,
// 	},
// },
⋮----
export function parseAdlibGraphic(config: StudioConfig, object: GraphicObject, index: number): IBlueprintAdLibPiece
⋮----
.join(', ')}`, // todo - add info
⋮----
// payload: {
// 	content: {
// 		...object.attributes,
// 		adlib: undefined,
// 	},
// 	manifest: '',
// 	template: {
// 		event: '',
// 		layer: '',
// 		name: object.clipName,
// 	},
// },
⋮----
_rank: index, // todo - probably some offset for ordering
⋮----
export function parseGraphicsFromObjects(config: StudioConfig, objects: SomeObject[]): GraphicsResult
function getGraphicLifespan(sourceLayer: SourceLayer, object: GraphicObject): PieceLifespan

================
File: src/showstyle0/helpers/metadata.ts
================
export interface RundownMetadata {
	ingestType: string
}

================
File: src/showstyle0/helpers/script.ts
================
import {
	IBlueprintPiece,
	IBlueprintPieceType,
	PieceLifespan,
	ScriptContent,
	WithTimeline,
} from '@sofie-automation/blueprints-integration'
import { literal } from '../../common/util'
import { getOutputLayerForSourceLayer, SourceLayer } from '../layers'
⋮----
function getFirstWords(input: string): string
⋮----
function getLastWords(input: string): string
⋮----
export function createScriptPiece(script: string | undefined, extId: string): IBlueprintPiece | undefined

================
File: src/showstyle0/helpers/sources.ts
================
import { SourceType, StudioConfig, VisionMixerType } from '../../studio0/helpers/config'
⋮----
export interface RawSourceInfo {
	type: SourceType
	/** 1-based number */
	id: number
}
⋮----
/** 1-based number */
⋮----
export interface SourceInfo extends RawSourceInfo {
	input: number
}
⋮----
export function findSource(input: string | number | boolean | undefined, type: SourceType): RawSourceInfo | undefined
⋮----
const match = (input + '').match(/(.*?)(\d+)(.*)/) // find the first number
⋮----
export function getSourceInfoFromRaw(config: StudioConfig, rawInfo: RawSourceInfo): SourceInfo

================
File: src/showstyle0/helpers/visionMixer.ts
================
import { TSR } from '@sofie-automation/blueprints-integration'
import { assertUnreachable, literal } from '../../common/util'
import { TimelineBlueprintExt } from '../../studio0/customTypes'
import { StudioConfig, VisionMixerType } from '../../studio0/helpers/config'
import { AtemLayers, VMixLayers } from '../../studio0/layers'
⋮----
export function createAtemInputTimelineObjects(
	input: number,
	start = 0,
	transitionDuration = 40,
	transitionProps?: Omit<TSR.TimelineContentAtemME['me'], 'programInput' | 'previewInput'>
): TimelineBlueprintExt<TSR.TimelineContentAtemME>[]
⋮----
duration: transitionDuration, // only used to do the transition
⋮----
// Add object for preview
⋮----
start: transitionDuration + 40, // after the transition keyframe
⋮----
export function createVMixTimelineObjects(
	input: number,
	start = 0,
	transitionDuration = 40,
	transitionProps?: TSR.VMixTransition
): TimelineBlueprintExt<TSR.TimelineContentVMixAny>[]
⋮----
// Add object for preview
⋮----
start: transitionDuration + 40, // after the transition keyframe
⋮----
export function createVisionMixerObjects(
	config: StudioConfig,
	input: number,
	start = 0,
	transitionDuration = 40,
	transitionProps?: {
		atemTransitionProps?: Omit<TSR.TimelineContentAtemME['me'], 'programInput' | 'previewInput'>
		vmixTransitionProps?: TSR.VMixTransition
	}
): TimelineBlueprintExt<TSR.TimelineContentVMixAny | TSR.TimelineContentAtemAny>[]

================
File: src/showstyle0/migrations/index.ts
================
import { literal } from '../../common/util'
import OutputLayerDefaults from './outputlayer-defaults'
import SourceLayerDefaults from './sourcelayer-defaults'
import { TriggeredActionsDefaults } from './triggered-actions-defaults'
import {
	getOutputLayerDefaultsMigrationSteps,
	getSourceLayerDefaultsMigrationSteps,
	getTriggeredActionsMigrationSteps,
} from './util'
import { variants } from './variants-defaults'
⋮----
declare const VERSION: string // Injected by webpack
⋮----
function getCreateVariantMigrationSteps(): MigrationStepShowStyle[]
⋮----
// Set other properties here
⋮----
// Fill in any layers that did not exist before
// Note: These should only be run as the very final step of all migrations. otherwise they will add items too early, and confuse old migrations

================
File: src/showstyle0/migrations/outputlayer-defaults.ts
================
import { IOutputLayer } from '@sofie-automation/blueprints-integration'
import { literal } from '../../common/util'
import { OutputLayer } from '../layers'

================
File: src/showstyle0/migrations/sourcelayer-defaults.ts
================
import { ISourceLayer, SourceLayerType } from '@sofie-automation/blueprints-integration'
import { literal } from '../../common/util'
import { SourceLayer } from '../layers'

================
File: src/showstyle0/migrations/triggered-actions-defaults.ts
================
import { IBlueprintTriggeredActions } from '@sofie-automation/blueprints-integration'
import { literal } from '../../common/util'
import { SourceLayer } from '../layers'
import { createAdLibHotkey } from './util'

================
File: src/showstyle0/migrations/util.ts
================
import {
	IAdLibFilterLink,
	IBlueprintTriggeredActions,
	IGUIContextFilterLink,
	IOutputLayer,
	IRundownPlaylistFilterLink,
	ISourceLayer,
	ITranslatableMessage,
	MigrationContextShowStyle,
	MigrationStepShowStyle,
	PlayoutActions,
	TriggerType,
} from '@sofie-automation/blueprints-integration'
⋮----
import { literal } from '../../common/util'
import { SourceLayer } from '../layers'
⋮----
export function getSourceLayerDefaultsMigrationSteps(
	versionStr: string,
	sourcelayerDefaults: ISourceLayer[]
): MigrationStepShowStyle[]
⋮----
export function getOutputLayerDefaultsMigrationSteps(
	versionStr: string,
	outputLayerDefaults: IOutputLayer[]
): MigrationStepShowStyle[]
⋮----
export function getTriggeredActionsMigrationSteps(
	versionStr: string,
	triggeredActionsDefaults: IBlueprintTriggeredActions[]
): MigrationStepShowStyle[]
⋮----
export function removeSourceLayer(versionStr: string, layer: string): MigrationStepShowStyle | undefined
⋮----
} // Nothing to update
⋮----
/**
 * These are supposed to be "locally" unique and the result will depend the order of it being called. That's on purpose
 * so that it's easy to replace a given hotkey with a different one.
 *
 * @param {string} prefix
 * @param {string} sourceLayerId
 * @param {boolean} globalAdLib
 * @param {number} pick
 * @return {*}
 */
function makeActionTriggerId(prefix: string, sourceLayerId: string, globalAdLib: boolean, pick: number)
⋮----
export function createAdLibHotkey(
	keys: string,
	sourceLayerIds: SourceLayer[],
	globalAdLib: boolean,
	pick: number,
	tags: string[] | undefined,
	label?: ITranslatableMessage
): IBlueprintTriggeredActions
⋮----
!globalAdLib // if not a Global AdLib, trigger only if it's coming from the current segment

================
File: src/showstyle0/migrations/variants-defaults.ts
================
import { literal } from '../../common/util'
⋮----
export interface Variant {
	[key: string]: {
		name: string
	}
}

================
File: src/showstyle0/part-adapters/camera.ts
================
import { BlueprintResultPart, IBlueprintPiece, PieceLifespan } from '@sofie-automation/blueprints-integration'
import { PartContext } from '../../common/context'
import { ObjectType, StudioGuestObject } from '../../common/definitions/objects'
import { literal } from '../../common/util'
import { AudioSourceType, StudioConfig } from '../../studio0/helpers/config'
import { SisyfosLayers } from '../../studio0/layers'
import { CameraProps, PartProps } from '../definitions'
import { getAudioObjectOnLayer, getAudioPrimaryObject } from '../helpers/audio'
import { parseClipsFromObjects } from '../helpers/clips'
import { parseGraphicsFromObjects } from '../helpers/graphics'
import { createScriptPiece } from '../helpers/script'
import { getSourceInfoFromRaw } from '../helpers/sources'
import { createVisionMixerObjects } from '../helpers/visionMixer'
import { getOutputLayerForSourceLayer, SourceLayer } from '../layers'
⋮----
export function generateCameraPart(context: PartContext, part: PartProps<CameraProps>): BlueprintResultPart
⋮----
const audioTlObj = getAudioPrimaryObject(config, [{ type: AudioSourceType.Host, index: 0 }]) // todo: all hosts?
⋮----
function addGuest(config: StudioConfig, count: number): IBlueprintPiece

================
File: src/showstyle0/part-adapters/dve.ts
================
import { BlueprintResultPart, IBlueprintPiece, PieceLifespan, TSR } from '@sofie-automation/blueprints-integration'
import { PartContext } from '../../common/context'
import { assertUnreachable, literal } from '../../common/util'
import { AudioSourceType, SourceType, StudioConfig, VisionMixerType } from '../../studio0/helpers/config'
import { AtemLayers, VMixLayers } from '../../studio0/layers'
import { DVEProps, PartProps } from '../definitions'
import { getAudioPrimaryObject } from '../helpers/audio'
import { getClipPlayerInput, parseClipsFromObjects } from '../helpers/clips'
import { dveLayoutToContent, parseSuperSourceLayout, parseSuperSourceProps } from '../helpers/dve'
import { parseGraphicsFromObjects } from '../helpers/graphics'
import { createScriptPiece } from '../helpers/script'
import { getSourceInfoFromRaw } from '../helpers/sources'
import { createVisionMixerObjects } from '../helpers/visionMixer'
import { getOutputLayerForSourceLayer, SourceLayer } from '../layers'
import { TimelineBlueprintExt } from '../../studio0/customTypes'
⋮----
export function generateDVEPart(context: PartContext, part: PartProps<DVEProps>): BlueprintResultPart
⋮----
// const sourceInfo = getSourceInfoFromRaw(config, part.payload.input1)
⋮----
index: 0, // whihc player?
⋮----
type: AudioSourceType.Host, // all hosts?
⋮----
name: `DVE`, // TODO
⋮----
/**
	 * this piece contains just the ATEM SSrc or vMix Multiview layouts and will
	 * stay on when you adlib a different primary to retain
	 * the layout
	 */

================
File: src/showstyle0/part-adapters/gfx.ts
================
import { BlueprintResultPart } from '@sofie-automation/blueprints-integration'
import { PartContext } from '../../common/context'
import { StudioConfig } from '../../studio0/helpers/config'
import { GfxProps, PartProps } from '../definitions'
import { parseClipsFromObjects } from '../helpers/clips'
import { parseGraphicsFromObjects } from '../helpers/graphics'
import { createScriptPiece } from '../helpers/script'
⋮----
export function generateGfxPart(context: PartContext, part: PartProps<GfxProps>): BlueprintResultPart

================
File: src/showstyle0/part-adapters/index.ts
================
import {
	BlueprintResultPart,
	BlueprintResultSegment,
	ISegmentUserContext,
} from '@sofie-automation/blueprints-integration'
import { PartContext } from '../../common/context'
import { t } from '../../common/util'
import {
	CameraProps,
	DVEProps,
	GfxProps,
	InvalidProps,
	PartProps,
	PartType,
	SegmentProps,
	TitlesProps,
	VOProps,
	VTProps,
} from '../definitions'
import { generateCameraPart } from './camera'
import { generateDVEPart } from './dve'
import { generateGfxPart } from './gfx'
import { generateRemotePart } from './remote'
import { generateOpenerPart as generateTitlesPart } from './titles'
import { generateVOPart } from './vo'
import { generateVTPart } from './vt'
⋮----
export function generateParts(context: ISegmentUserContext, intermediateSegment: SegmentProps): BlueprintResultSegment

================
File: src/showstyle0/part-adapters/remote.ts
================
import { BlueprintResultPart, IBlueprintPiece, PieceLifespan } from '@sofie-automation/blueprints-integration'
import { PartContext } from '../../common/context'
import { AudioSourceType, StudioConfig } from '../../studio0/helpers/config'
import { PartProps, RemoteProps } from '../definitions'
import { getAudioPrimaryObject } from '../helpers/audio'
import { parseClipsFromObjects } from '../helpers/clips'
import { parseGraphicsFromObjects } from '../helpers/graphics'
import { createScriptPiece } from '../helpers/script'
import { getSourceInfoFromRaw } from '../helpers/sources'
import { createVisionMixerObjects } from '../helpers/visionMixer'
import { getOutputLayerForSourceLayer, SourceLayer } from '../layers'
⋮----
export function generateRemotePart(context: PartContext, part: PartProps<RemoteProps>): BlueprintResultPart
⋮----
const audioTlObj = getAudioPrimaryObject(config, [{ type: AudioSourceType.Remote, index: part.payload.input.id - 1 }]) // todo: all hosts?

================
File: src/showstyle0/part-adapters/titles.ts
================
import {
	BlueprintResultPart,
	ExpectedPackage,
	IBlueprintPiece,
	PieceLifespan,
	TSR,
} from '@sofie-automation/blueprints-integration'
import { PartContext } from '../../common/context'
import { literal } from '../../common/util'
import { StudioConfig } from '../../studio0/helpers/config'
import { CasparCGLayers } from '../../studio0/layers'
import { PartProps, TitlesProps } from '../definitions'
import { getClipPlayerInput } from '../helpers/clips'
import { createScriptPiece } from '../helpers/script'
import { createVisionMixerObjects } from '../helpers/visionMixer'
import { getOutputLayerForSourceLayer, SourceLayer } from '../layers'
import { TimelineBlueprintExt } from '../../studio0/customTypes'
⋮----
export function generateOpenerPart(context: PartContext, part: PartProps<TitlesProps>): BlueprintResultPart
⋮----
/**
			 * The opener video file does not have an audio track,
			 * so we set this to true to suppress the "missing audio" warning
			 * in the Rundown view.
			 */
⋮----
// clip
⋮----
// clip
⋮----
// HACK: Disable preview and thumbnail generation.
// Once release39 is out, we can remove the "as any" from these values, and it will no longer be a hack.
// https://github.com/nrkno/tv-automation-server-core/commit/5e0a9c36c628be92370c035f78c8a8f278debbfa

================
File: src/showstyle0/part-adapters/vo.ts
================
import {
	BlueprintResultPart,
	ExpectedPackage,
	IBlueprintPiece,
	PieceLifespan,
	TSR,
} from '@sofie-automation/blueprints-integration'
import { PartContext } from '../../common/context'
import { changeExtension, literal, stripExtension } from '../../common/util'
import { StudioConfig } from '../../studio0/helpers/config'
import { CasparCGLayers } from '../../studio0/layers'
import { PartProps, VOProps } from '../definitions'
import { getClipPlayerInput } from '../helpers/clips'
import { parseGraphicsFromObjects } from '../helpers/graphics'
import { createScriptPiece } from '../helpers/script'
import { createVisionMixerObjects } from '../helpers/visionMixer'
import { getOutputLayerForSourceLayer, SourceLayer } from '../layers'
import { TimelineBlueprintExt } from '../../studio0/customTypes'
⋮----
export function generateVOPart(context: PartContext, part: PartProps<VOProps>): BlueprintResultPart

================
File: src/showstyle0/part-adapters/vt.ts
================
import {
	BlueprintResultPart,
	ExpectedPackage,
	IBlueprintPiece,
	PieceLifespan,
	TSR,
} from '@sofie-automation/blueprints-integration'
import { PartContext } from '../../common/context'
import { changeExtension, literal, stripExtension } from '../../common/util'
import { AudioSourceType, StudioConfig } from '../../studio0/helpers/config'
import { CasparCGLayers } from '../../studio0/layers'
import { PartProps, VTProps } from '../definitions'
import { getAudioPrimaryObject } from '../helpers/audio'
import { getClipPlayerInput } from '../helpers/clips'
import { parseGraphicsFromObjects } from '../helpers/graphics'
import { createScriptPiece } from '../helpers/script'
import { createVisionMixerObjects } from '../helpers/visionMixer'
import { getOutputLayerForSourceLayer, SourceLayer } from '../layers'
import { TimelineBlueprintExt } from '../../studio0/customTypes'
⋮----
export function generateVTPart(context: PartContext, part: PartProps<VTProps>): BlueprintResultPart
⋮----
const audioTlObj = getAudioPrimaryObject(config, [{ type: AudioSourceType.Playback, index: 0 }]) // todo: which playback?

================
File: src/showstyle0/rundown/baseline.ts
================
import { BlueprintResultBaseline, IShowStyleUserContext, TSR } from '@sofie-automation/blueprints-integration'
⋮----
import { literal } from '../../common/util'
import { SourceType, StudioConfig, VisionMixerType } from '../../studio0/helpers/config'
import { AtemLayers, CasparCGLayers, SisyfosLayers, VMixLayers } from '../../studio0/layers'
import { getSisyfosBaseline } from '../helpers/audio'
import { DVEDesigns, DVELayouts } from '../helpers/dve'
import { TimelineBlueprintExt } from '../../studio0/customTypes'
⋮----
export function getBaseline(context: IShowStyleUserContext): BlueprintResultBaseline
⋮----
function getAtemBaseline(config: StudioConfig): TimelineBlueprintExt[]
⋮----
artFillSource: 3010, // atem mediaplayer1
⋮----
artOption: 0, // bg art
⋮----
function getVMixBaseline(config: StudioConfig): TimelineBlueprintExt[]

================
File: src/showstyle0/rundown/globalActions.ts
================
import {
	ExtendedIngestRundown,
	IBlueprintActionManifest,
	IShowStyleUserContext,
} from '@sofie-automation/blueprints-integration'
import { literal, t } from '../../common/util'
import { ActionId } from '../actionDefinitions'
import { getOutputLayerForSourceLayer, SourceLayer } from '../layers'
⋮----
export function getGlobalActions(
	_context: IShowStyleUserContext,
	ingestRundown: ExtendedIngestRundown
): IBlueprintActionManifest[]

================
File: src/showstyle0/rundown/globalAdlibs.ts
================
import { IBlueprintAdLibPiece, IShowStyleUserContext, PieceLifespan } from '@sofie-automation/blueprints-integration'
import { assertUnreachable, literal } from '../../common/util'
import { AudioSourceType, SourceType, StudioConfig, VisionMixerType } from '../../studio0/helpers/config'
import { SisyfosLayers } from '../../studio0/layers'
import { getAudioObjectOnLayer, getAudioPrimaryObject } from '../helpers/audio'
import { createVisionMixerObjects } from '../helpers/visionMixer'
import { getOutputLayerForSourceLayer, SourceLayer } from '../layers'
⋮----
export function getGlobalAdlibs(context: IShowStyleUserContext): IBlueprintAdLibPiece[]
⋮----
const makeCameraAdlib = (id: number, input: number): IBlueprintAdLibPiece => (
const makeRemoteAdlib = (id: number, input: number): IBlueprintAdLibPiece => (

================
File: src/showstyle0/rundown/index.ts
================
import {
	BlueprintResultRundown,
	ExtendedIngestRundown,
	IBlueprintRundown,
	IShowStyleUserContext,
	PlaylistTimingForwardTime,
	PlaylistTimingType,
} from '@sofie-automation/blueprints-integration'
import { literal } from '../../common/util'
import { SpreadsheetIngestRundown } from '../../copy/spreadsheet-gateway'
import { RundownMetadata } from '../helpers/metadata'
import { getBaseline } from './baseline'
import { getGlobalActions } from './globalActions'
import { getGlobalAdlibs } from './globalAdlibs'
⋮----
export function getRundown(
	context: IShowStyleUserContext,
	ingestRundown: ExtendedIngestRundown
): BlueprintResultRundown
⋮----
// Guard against missing or faulty payload:

================
File: src/showstyle0/sofie-editor-parsers/base.ts
================
import { EditorIngestPart } from '../../copy/rundown-editor'
import { PartBaseProps } from '../definitions'
⋮----
export function parseBaseProps(part: EditorIngestPart): PartBaseProps

================
File: src/showstyle0/sofie-editor-parsers/camera.ts
================
import { ObjectType, SomeObject } from '../../common/definitions/objects'
import { t } from '../../common/util'
import { EditorIngestPart } from '../../copy/rundown-editor'
import { SourceType } from '../../studio0/helpers/config'
import { CameraProps, InvalidProps, PartInfo, PartProps, PartType } from '../definitions'
import { findSource } from '../helpers/sources'
import { parseBaseProps } from './base'
import { createInvalidProps } from './invalid'
⋮----
export function parseCamera(ingestPart: EditorIngestPart): PartProps<CameraProps | InvalidProps>

================
File: src/showstyle0/sofie-editor-parsers/dve.ts
================
import { ObjectType, SomeObject, SplitObject, VideoObject } from '../../common/definitions/objects'
import { EditorIngestPart } from '../../copy/rundown-editor'
import { SourceType } from '../../studio0/helpers/config'
import { DVEProps, InvalidProps, PartInfo, PartProps, PartType } from '../definitions'
import { parseClipEditorProps } from '../helpers/clips'
import { findSource } from '../helpers/sources'
import { parseBaseProps } from './base'
⋮----
export function parseDVE(ingestPart: EditorIngestPart): PartProps<DVEProps | InvalidProps>
⋮----
// TODO - parse layout property
⋮----
let hasVideo = false // only 1 player means only 1 input can be video
⋮----
inputs: splitInputs.slice(0, 2), // TODO - three box?

================
File: src/showstyle0/sofie-editor-parsers/gfx.ts
================
import { GraphicObject, ObjectType, SomeObject } from '../../common/definitions/objects'
import { t } from '../../common/util'
import { EditorIngestPart } from '../../copy/rundown-editor'
import { GfxProps, InvalidProps, PartInfo, PartProps, PartType } from '../definitions'
import { parseBaseProps } from './base'
import { createInvalidProps } from './invalid'
⋮----
export function parseGfx(ingestPart: EditorIngestPart): PartProps<GfxProps | InvalidProps>

================
File: src/showstyle0/sofie-editor-parsers/index.ts
================
import { IngestSegment, IRundownUserContext } from '@sofie-automation/blueprints-integration'
import { ObjectType } from '../../common/definitions/objects'
import { t } from '../../common/util'
import { EditorIngestPart, EditorIngestSegment } from '../../copy/rundown-editor'
import { AllProps, PartProps, SegmentProps, SegmentType } from '../definitions'
import { createInvalidProps } from '../spreadsheet-parsers/invalid'
import { parseCamera } from './camera'
import { parseDVE } from './dve'
import { parseGfx } from './gfx'
import { parseRemote } from './remote'
import { parseOpener } from './titles'
import { parseVO } from './vo'
import { parseVT } from './vt'
⋮----
/**
 * This function converts from raw ingest segments to parsed segments, we
 * make sure to parse to the data structure originally used by the
 * spreadsheets.
 * @param context
 * @param ingestSegment The segment from the spreadsheet-gateway
 * @returns Intermediate data type used to generate parts
 */
export function convertIngestData(context: IRundownUserContext, ingestSegment: IngestSegment): SegmentProps
⋮----
// process the pieces
⋮----
// process the pieces

================
File: src/showstyle0/sofie-editor-parsers/invalid.ts
================
import { ITranslatableMessage } from '@sofie-automation/blueprints-integration'
import { SomeObject } from '../../common/definitions/objects'
import { EditorIngestPart } from '../../copy/rundown-editor'
import { InvalidProps, PartInfo, PartProps, PartType } from '../definitions'
import { parseBaseProps } from './base'
⋮----
export function createInvalidProps(
	reason: ITranslatableMessage,
	ingestPart: EditorIngestPart
): PartProps<InvalidProps>

================
File: src/showstyle0/sofie-editor-parsers/remote.ts
================
import { ObjectType, SomeObject } from '../../common/definitions/objects'
import { t } from '../../common/util'
import { EditorIngestPart } from '../../copy/rundown-editor'
import { SourceType } from '../../studio0/helpers/config'
import { InvalidProps, PartInfo, PartProps, PartType, RemoteProps } from '../definitions'
import { findSource } from '../helpers/sources'
import { parseBaseProps } from './base'
import { createInvalidProps } from './invalid'
⋮----
export function parseRemote(ingestPart: EditorIngestPart): PartProps<RemoteProps | InvalidProps>

================
File: src/showstyle0/sofie-editor-parsers/titles.ts
================
import { SomeObject } from '../../common/definitions/objects'
import { EditorIngestPart } from '../../copy/rundown-editor'
import { InvalidProps, PartInfo, PartProps, PartType, TitlesProps } from '../definitions'
import { parseBaseProps } from './base'
⋮----
export function parseOpener(ingestPart: EditorIngestPart): PartProps<TitlesProps | InvalidProps>

================
File: src/showstyle0/sofie-editor-parsers/vo.ts
================
import { ObjectType, SomeObject, VideoObject } from '../../common/definitions/objects'
import { t } from '../../common/util'
import { EditorIngestPart } from '../../copy/rundown-editor'
import { InvalidProps, PartInfo, PartProps, PartType, VOProps } from '../definitions'
import { parseClipEditorProps } from '../helpers/clips'
import { parseBaseProps } from './base'
import { createInvalidProps } from './invalid'
⋮----
export function parseVO(ingestPart: EditorIngestPart): PartProps<VOProps | InvalidProps>

================
File: src/showstyle0/sofie-editor-parsers/vt.ts
================
import { ObjectType, SomeObject, VideoObject } from '../../common/definitions/objects'
import { t } from '../../common/util'
import { EditorIngestPart } from '../../copy/rundown-editor'
import { InvalidProps, PartInfo, PartProps, PartType, VTProps } from '../definitions'
import { parseClipEditorProps } from '../helpers/clips'
import { parseBaseProps } from './base'
import { createInvalidProps } from './invalid'
⋮----
export function parseVT(ingestPart: EditorIngestPart): PartProps<VTProps | InvalidProps>

================
File: src/showstyle0/spreadsheet-parsers/base.ts
================
import { SpreadsheetIngestPart } from '../../copy/spreadsheet-gateway'
import { PartBaseProps } from '../definitions'
⋮----
export function parseBaseProps(part: SpreadsheetIngestPart): PartBaseProps
⋮----
duration: part.pieces.find((p) => p.attributes.adlib === 'false')?.duration || 0, // TODO - better default time?

================
File: src/showstyle0/spreadsheet-parsers/camera.ts
================
import { CameraObject, ObjectType, SomeObject } from '../../common/definitions/objects'
import { t } from '../../common/util'
import { SpreadsheetIngestPart } from '../../copy/spreadsheet-gateway'
import { SourceType } from '../../studio0/helpers/config'
import { CameraProps, InvalidProps, PartInfo, PartProps, PartType } from '../definitions'
import { findSource } from '../helpers/sources'
import { parseBaseProps } from './base'
import { createInvalidProps } from './invalid'
⋮----
export function parseCamera(ingestPart: SpreadsheetIngestPart): PartProps<CameraProps | InvalidProps>

================
File: src/showstyle0/spreadsheet-parsers/dve.ts
================
import { ObjectType, SomeObject, SplitObject, VideoObject } from '../../common/definitions/objects'
import { SpreadsheetIngestPart } from '../../copy/spreadsheet-gateway'
import { SourceType } from '../../studio0/helpers/config'
import { DVEProps, InvalidProps, PartInfo, PartProps, PartType } from '../definitions'
import { parseClipProps } from '../helpers/clips'
import { findSource } from '../helpers/sources'
import { parseBaseProps } from './base'
⋮----
export function parseDVE(ingestPart: SpreadsheetIngestPart): PartProps<DVEProps | InvalidProps>
⋮----
// TODO - parse layout property
⋮----
let hasVideo = false // only 1 player means only 1 input can be video
⋮----
inputs: splitInputs.slice(0, 2), // TODO - three box?

================
File: src/showstyle0/spreadsheet-parsers/gfx.ts
================
import { GraphicObject, ObjectType, SomeObject } from '../../common/definitions/objects'
import { t } from '../../common/util'
import { SpreadsheetIngestPart } from '../../copy/spreadsheet-gateway'
import { GfxProps, InvalidProps, PartInfo, PartProps, PartType } from '../definitions'
import { parseBaseProps } from './base'
import { createInvalidProps } from './invalid'
⋮----
export function parseGfx(ingestPart: SpreadsheetIngestPart): PartProps<GfxProps | InvalidProps>

================
File: src/showstyle0/spreadsheet-parsers/index.ts
================
import { IngestSegment, IRundownUserContext } from '@sofie-automation/blueprints-integration'
import { t } from '../../common/util'
import { SpreadsheetIngestPart, SpreadsheetIngestSegment } from '../../copy/spreadsheet-gateway'
import { AllProps, PartProps, SegmentProps, SegmentType } from '../definitions'
import { parseCamera } from './camera'
import { parseDVE } from './dve'
import { parseGfx } from './gfx'
import { createInvalidProps } from './invalid'
import { parseRemote } from './remote'
import { parseOpener } from './titles'
import { parseVO } from './vo'
import { parseVT } from './vt'
⋮----
/**
 * This function converts from raw ingest segments to parsed segments
 * @param context
 * @param ingestSegment The segment from the spreadsheet-gateway
 * @returns Intermediate data type used to generate parts
 */
export function convertIngestData(context: IRundownUserContext, ingestSegment: IngestSegment): SegmentProps
⋮----
// parse the objects

================
File: src/showstyle0/spreadsheet-parsers/invalid.ts
================
import { ITranslatableMessage } from '@sofie-automation/blueprints-integration'
import { SomeObject } from '../../common/definitions/objects'
import { SpreadsheetIngestPart } from '../../copy/spreadsheet-gateway'
import { InvalidProps, PartInfo, PartProps, PartType } from '../definitions'
import { parseBaseProps } from './base'
⋮----
export function createInvalidProps(
	reason: ITranslatableMessage,
	ingestPart: SpreadsheetIngestPart
): PartProps<InvalidProps>

================
File: src/showstyle0/spreadsheet-parsers/remote.ts
================
import { ObjectType, RemoteObject, SomeObject } from '../../common/definitions/objects'
import { t } from '../../common/util'
import { SpreadsheetIngestPart } from '../../copy/spreadsheet-gateway'
import { SourceType } from '../../studio0/helpers/config'
import { InvalidProps, PartInfo, PartProps, PartType, RemoteProps } from '../definitions'
import { findSource } from '../helpers/sources'
import { parseBaseProps } from './base'
import { createInvalidProps } from './invalid'
⋮----
export function parseRemote(ingestPart: SpreadsheetIngestPart): PartProps<RemoteProps | InvalidProps>

================
File: src/showstyle0/spreadsheet-parsers/titles.ts
================
import { SomeObject } from '../../common/definitions/objects'
import { SpreadsheetIngestPart } from '../../copy/spreadsheet-gateway'
import { InvalidProps, PartInfo, PartProps, PartType, TitlesProps } from '../definitions'
import { parseBaseProps } from './base'
⋮----
export function parseOpener(ingestPart: SpreadsheetIngestPart): PartProps<TitlesProps | InvalidProps>

================
File: src/showstyle0/spreadsheet-parsers/vo.ts
================
import { ObjectType, SomeObject, VideoObject } from '../../common/definitions/objects'
import { t } from '../../common/util'
import { SpreadsheetIngestPart } from '../../copy/spreadsheet-gateway'
import { InvalidProps, PartInfo, PartProps, PartType, VOProps } from '../definitions'
import { parseClipProps } from '../helpers/clips'
import { parseBaseProps } from './base'
import { createInvalidProps } from './invalid'
⋮----
export function parseVO(ingestPart: SpreadsheetIngestPart): PartProps<VOProps | InvalidProps>

================
File: src/showstyle0/spreadsheet-parsers/vt.ts
================
import { ObjectType, SomeObject, VideoObject } from '../../common/definitions/objects'
import { t } from '../../common/util'
import { SpreadsheetIngestPart } from '../../copy/spreadsheet-gateway'
import { InvalidProps, PartInfo, PartProps, PartType, VTProps } from '../definitions'
import { parseClipProps } from '../helpers/clips'
import { parseBaseProps } from './base'
import { createInvalidProps } from './invalid'
⋮----
export function parseVT(ingestPart: SpreadsheetIngestPart): PartProps<VTProps | InvalidProps>

================
File: src/showstyle0/actionDefinitions.ts
================
export enum ActionId {
	LastRemote = 'lastRemote',
	LastDVE = 'lastDVE',
}

================
File: src/showstyle0/config-schema.json
================
{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://example.com/product.schema.json",
	"title": "ShowStyle Config",
	"type": "object",
	"properties": {
		"dvePresets": {
			"type": "object",
			"ui:title": "DVE Presets",
			"ui:category": "DVEs",
			"patternProperties": {
				"": {
					"type": "object",
					"title": "DVELayoutConfig",
					"properties": {
						"name": {
							"type": "string",
							"ui:title": "Preset name",
							"ui:description": "Name to use in rundown editor",
							"ui:summaryTitle": "Preset name",
							"default": ""
						},
						"boxes": {
							"type": "integer",
							"ui:title": "Number of Boxes",
							"ui:description": "The number of Boxes present in this DVE Layout",
							"ui:summaryTitle": "Number of Boxes",
							"min": 1,
							"default": 2
						},
						"preset": {
							"type": "string",
							"ui:title": "JSON Preset",
							"ui:description": "JSON configuration of the supersource",
							"ui:summaryTitle": "JSON Preset",
							"default": ""
						}
					},
					"required": ["name", "boxes", "preset"]
				}
			}
		}
	},
	"required": ["dvePresets"]
}

================
File: src/showstyle0/getAdlibItem.ts
================
import {
	IBlueprintActionManifest,
	IBlueprintAdLibPiece,
	IngestAdlib,
	IShowStyleUserContext,
} from '@sofie-automation/blueprints-integration'
// import { identifyMosItem } from '../common/mos-parsers/storyItems'
// import { getStoryItemsOptions, parseConfig } from './helpers/config'
// import { parseStoryItem } from './helpers/storyItems'
// import { createBtsItem } from './helpers/storyItems/bts'
⋮----
export function getAdlibItem(
	_context: IShowStyleUserContext,
	_ingestItem: IngestAdlib
): IBlueprintAdLibPiece | IBlueprintActionManifest | null
⋮----
// if (ingestItem.payloadType !== 'mos' && ingestItem.payloadType !== 'MOS') {
// 	throw new Error(`Unsupported payloadType: "${ingestItem.payloadType}"`)
// }
⋮----
// const config = parseConfig(context)
// const mosItem = identifyMosItem(context, getStoryItemsOptions(config, null), {
// 	Content: ingestItem.payload,
// 	Type: '',
// })
// const parsedItem = mosItem ? parseStoryItem(context, config, mosItem) : undefined
⋮----
// if (parsedItem) {
// 	const bts = createBtsItem(context, config, null, parsedItem, 0)
// 	return bts ?? null
// } else {
// 	return null
// }

================
File: src/showstyle0/getSegment.ts
================
import {
	BlueprintResultSegment,
	IBlueprintRundown,
	IngestSegment,
	ISegmentUserContext,
} from '@sofie-automation/blueprints-integration'
import { RundownMetadata } from './helpers/metadata'
import { generateParts } from './part-adapters'
import { convertIngestData as convertEditorIngestData } from './sofie-editor-parsers'
import { convertIngestData as convertSpreadsheetIngestData } from './spreadsheet-parsers'
⋮----
export function getSegment(context: ISegmentUserContext, ingestSegment: IngestSegment): BlueprintResultSegment

================
File: src/showstyle0/getShowStyleVariantId.ts
================
import {
	ExtendedIngestRundown,
	IBlueprintShowStyleVariant,
	IStudioUserContext,
} from '@sofie-automation/blueprints-integration'
import { ReadonlyObjectDeep } from 'type-fest/source/readonly-deep'
// import _ = require('underscore')
⋮----
export function getShowStyleVariantId(
	_context: IStudioUserContext,
	showStyleVariants: ReadonlyObjectDeep<IBlueprintShowStyleVariant[]>,
	_ingestRundown: ExtendedIngestRundown
): string | null
⋮----
// Here you could parse bits of the rundown to decide which showstyle variant the rundown should have
⋮----
// TODO - the fallback used below doesn't work for some reason
⋮----
// Fallback to the first
const firstVariant = showStyleVariants[0] // _.first(showStyleVariants)
⋮----
// return 'HhhhArAYKMBL42oaG'

================
File: src/showstyle0/index.ts
================
import {
	BlueprintManifestType,
	JSONBlobStringify,
	ShowStyleBlueprintManifest,
} from '@sofie-automation/blueprints-integration'
import { executeAction } from './executeActions'
import { getSegment } from './getSegment'
import { getShowStyleVariantId } from './getShowStyleVariantId'
// import { showStyleMigrations } from './migrations'
import { getRundown } from './rundown'
import OutputLayerDefaults from './migrations/outputlayer-defaults'
import SourceLayerDefaults from './migrations/sourcelayer-defaults'
import { TriggeredActionsDefaults } from './migrations/triggered-actions-defaults'
⋮----
declare const VERSION: string // Injected by webpack
declare const VERSION_TSR: string // Injected by webpack
declare const VERSION_INTEGRATION: string // Injected by webpack
declare const TRANSLATION_BUNDLES: string // injected by webpack

================
File: src/showstyle0/layers.ts
================
export enum SourceLayer {
	Titles = 'opener',
	Camera = 'cam',
	Remote = 'remote',
	VT = 'vt',
	VO = 'vo',
	DVE = 'dve',
	DVE_RETAIN = 'dveRetain',
	GFX = 'gfx',

	AudioBed = 'audioBed',
	StudioGuests = 'guest',
	HostOverride = 'hostOverride',

	LowerThird = 'lower_third',
	Strap = 'strap',
	Ticker = 'ticker',
	Logo = 'logo',

	Script = 'script',
}
⋮----
export enum OutputLayer {
	Gfx = 'gfx',
	Pgm = 'pgm',
	Aux = 'aux',
	Script = 'script',
}
⋮----
export function getOutputLayerForSourceLayer(layer: SourceLayer): OutputLayer

================
File: src/studio0/helpers/config.ts
================
import { IStudioContext, IStudioUserContext } from '@sofie-automation/blueprints-integration'
import { StudioConfig as StudioConfig0 } from '../../generated/studio-config'
⋮----
export enum VisionMixerType {
	Atem = 'atem',
	VMix = 'vmix',
}
⋮----
export enum SourceType {
	Camera = 'camera',
	Remote = 'remote',
	MediaPlayer = 'mediaplayer',
	Graphics = 'graphics',
	MultiView = 'multiview',
}
⋮----
export enum AudioSourceType {
	Host = 'host',
	Guest = 'guest',
	Remote = 'remote',
	Playback = 'playback',
	// FX?
}
⋮----
// FX?
⋮----
export interface BlueprintConfig {
	studio: StudioConfig
}
⋮----
export type StudioConfig = StudioConfig0
⋮----
export function getStudioConfig(context: IStudioUserContext | IStudioContext): StudioConfig

================
File: src/studio0/migrations/devices.ts
================
import {
	MigrationContextStudio,
	MigrationStepInput,
	MigrationStepInputFilteredResult,
	MigrationStepStudio,
	TSR,
} from '@sofie-automation/blueprints-integration'
import { literal } from '../../common/util'
import { VisionMixerType } from '../helpers/config'
⋮----
declare const VERSION: string // Injected by webpack
⋮----
export interface DeviceEntry {
	id: string
	firstVersion: string
	type: TSR.DeviceType
	defaultValue: (
		input: MigrationStepInputFilteredResult,
		context: MigrationContextStudio
	) => TSR.DeviceOptionsAny | undefined
	input?: MigrationStepInput[]
	validate?: (device: TSR.DeviceOptionsAny) => string | boolean
	createDependsOn?: string
	createCondition?: (context: MigrationContextStudio) => boolean
}
⋮----
// create all devices
⋮----
// ensure all devices still look valid
⋮----
export function validateDevice(version: string, spec: DeviceEntry): MigrationStepStudio
⋮----
export function createDevice(spec: DeviceEntry): MigrationStepStudio
⋮----
export function updateDeviceId(
	oldDeviceId: string,
	version: string,
	translateDeviceId: (context: MigrationContextStudio, id: string) => string
): MigrationStepStudio
⋮----
} // New dev already exists

================
File: src/studio0/migrations/index.ts
================
import { MigrationStepStudio } from '@sofie-automation/blueprints-integration'
import { literal } from '../../common/util'
import { deviceMigrations } from './devices'
import { getMappingsDefaultsMigrationSteps } from './util'
⋮----
declare const VERSION: string // Injected by webpack
⋮----
/**
 * Versions: See README.md for list of versions vs releases
 */
⋮----
// Ensure required config values are defined
⋮----
// Fill in any mappings that did not exist before
// Note: These should only be run as the very final step of all migrations. otherwise they will add items too early, and confuse old migrations

================
File: src/studio0/migrations/mappings-defaults.ts
================
import { BlueprintMapping, BlueprintMappings, LookaheadMode, TSR } from '@sofie-automation/blueprints-integration'
import { literal } from '../../common/util'
import { AudioSourceType, SourceType, StudioConfig } from '../helpers/config'
import { AsbtractLayers, AtemLayers, CasparCGLayers, SisyfosLayers, VMixLayers } from '../layers'
⋮----
export function getDynamicVMixMappings(vmixSources: StudioConfig['vmixSources']): BlueprintMappings
⋮----
/**
		 * Note that the word "MultiView" here does not refer to a traditional multiviewer used to monitor inputs and outputs in a studio.
		 * Instead, vMix uses this word to describe an input which has other inputs overlaid on top of it like a DVE.
		 * This is vMix's version of an ATEM SuperSource.
		 */
⋮----
export function getAllAuxMappings(total: number): BlueprintMappings
⋮----
export function getDynamicSisyfosMappings(sisyfosSources: StudioConfig['sisyfosSources']): BlueprintMappings
⋮----
const pushSisyfosMappings = (type: AudioSourceType) =>
⋮----
setLabelToLayerName: false, // ??

================
File: src/studio0/migrations/util.ts
================
import {
	BlueprintMapping,
	BlueprintMappings,
	ConfigItemValue,
	LookaheadMode,
	MigrationContextStudio,
	MigrationStepInput,
	MigrationStepInputFilteredResult,
	MigrationStepStudio,
} from '@sofie-automation/blueprints-integration'
⋮----
import { literal } from '../../common/util'
import { StudioConfig, VisionMixerType } from '../helpers/config'
import MappingsDefaults, {
	AtemMappings,
	getAllAuxMappings,
	getDynamicSisyfosMappings,
	getDynamicVMixMappings,
} from './mappings-defaults'
⋮----
export function getConfigOrDefault(context: MigrationContextStudio, name: string): ConfigItemValue | undefined
export function getMappingsDefaultsMigrationSteps(versionStr: string): MigrationStepStudio[]
⋮----
const createMapping =
(configId: string, condition: (configValue: ConfigItemValue | undefined)
⋮----
// defaultVal.deviceId = defaultVal.deviceId
⋮----
const getVMixMappings = (context: MigrationContextStudio): BlueprintMappings =>
⋮----
const getAuxMappings = (context: MigrationContextStudio): BlueprintMappings =>
⋮----
const getSisyfosMappings = (context: MigrationContextStudio): BlueprintMappings =>
⋮----
export function ensureStudioConfig<TConfig>(
	version: string,
	configName: keyof TConfig,
	value: any | null, // null if manual
	inputType: 'text' | 'multiline' | 'int' | 'checkbox' | 'dropdown' | 'switch' | undefined, // EditAttribute types
	label: string,
	description: string,
	defaultValue?: ConfigItemValue,
	dropdownOptions?: string[],
	dependOnResultFrom?: string
): MigrationStepStudio
⋮----
value: any | null, // null if manual
inputType: 'text' | 'multiline' | 'int' | 'checkbox' | 'dropdown' | 'switch' | undefined, // EditAttribute types
⋮----
export function updateStudioConfig(
	version: string,
	configName: string,
	mutator: (val: any, validate: boolean) => any,
	dependOnResultFrom?: string
): MigrationStepStudio
⋮----
export function renameStudioConfig<TConfig>(
	version: string,
	oldConfigName: string,
	newConfigName: keyof TConfig,
	updateValue?: (val: any) => ConfigItemValue
): MigrationStepStudio
⋮----
export function removeStudioConfig(version: string, oldConfigName: string): MigrationStepStudio
⋮----
export function renameMapping(version: string, oldMappingName: string, newMappingName: string): MigrationStepStudio
⋮----
export function removeMapping(version: string, oldMappingName: string): MigrationStepStudio
⋮----
export function updateMappingLookahead(
	version: string,
	mapping: string,
	targetMode: LookaheadMode
): MigrationStepStudio
⋮----
export function translateGraphicsRendererUrl(
	version: string,
	newName: string,
	oldName: string,
	oldValue: string
): MigrationStepStudio
⋮----
// Nothing to do

================
File: src/studio0/config-schema.json
================
{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://example.com/product.schema.json",
	"title": "Studio Config",
	"type": "object",
	"properties": {
		"visionMixerType": {
			"type": "string",
			"ui:title": "Vision mixer type",
			"ui:description": "Atem or VMix",
			"enum": ["atem", "vmix"],
			"default": "atem"
		},
		"atemSources": {
			"type": "object",
			"ui:title": "Atem Sources",
			"ui:description": "Description of Atem inputs i.e. cameras, remotes etc.",
			"ui:category": "Inputs",
			"patternProperties": {
				"": {
					"type": "object",
					"title": "InputConfig",
					"properties": {
						"input": {
							"type": "integer",
							"ui:title": "Input",
							"ui:description": "Input number on the atem, see https://atem.julusian.dev/enums#videosource",
							"ui:summaryTitle": "Input",
							"default": 1
						},
						"type": {
							"type": "string",
							"ui:title": "Type",
							"ui:description": "Input Type",
							"ui:summaryTitle": "Type",
							"default": "camera"
						}
					},
					"required": ["input", "type"]
				}
			}
		},
		"atemOutputs": {
			"type": "object",
			"ui:title": "Atem Outputs",
			"ui:description": "Description of Atem outputs / auxes",
			"ui:category": "Outputs",
			"patternProperties": {
				"": {
					"type": "object",
					"title": "OutputConfig",
					"properties": {
						"output": {
							"type": "integer",
							"ui:title": "Output",
							"ui:description": "Aux number on the atem",
							"ui:summaryTitle": "Output",
							"default": 1
						},
						"source": {
							"type": "number",
							"ui:title": "Source",
							"ui:description": "Source number, see https://atem.julusian.dev/enums#videosource",
							"ui:summaryTitle": "Source",
							"default": 1
						}
					},
					"required": ["output", "source"]
				}
			}
		},
		"vmixSources": {
			"type": "object",
			"ui:title": "vMix Sources",
			"ui:description": "Description of vMix inputs i.e. cameras, remotes etc.",
			"ui:category": "Inputs",
			"patternProperties": {
				"": {
					"type": "object",
					"title": "VmixInputConfig",
					"properties": {
						"input": {
							"type": "integer",
							"ui:title": "Input",
							"ui:description": "Input number for the vmix source",
							"ui:summaryTitle": "Input",
							"default": 1
						},
						"type": {
							"type": "string",
							"ui:title": "Type",
							"ui:description": "Input Type",
							"ui:summaryTitle": "Type",
							"default": "camera"
						}
					},
					"required": ["input", "type"]
				}
			}
		},
		"sisyfosSources": {
			"type": "object",
			"ui:title": "Sisyfos Sources",
			"ui:description": "Description of Sisyfos channels",
			"ui:category": "Audio",
			"patternProperties": {
				"": {
					"type": "object",
					"title": "SiyfosSourceConfig",
					"properties": {
						"source": {
							"type": "integer",
							"ui:title": "Source",
							"ui:description": "Channel number of the sisyfos channel",
							"ui:summaryTitle": "Source",
							"default": 1
						},
						"type": {
							"type": "string",
							"ui:title": "Type",
							"ui:description": "Input Type",
							"ui:summaryTitle": "Type",
							"default": "host"
						}
					},
					"required": ["source", "type"]
				}
			}
		},
		"previewRenderer": {
			"type": "string",
			"ui:title": "Preview Renderer",
			"ui:description": "Graphics preview renderer URL",
			"ui:category": "Graphics",
			"default": ""
		},
		"casparcgLatency": {
			"type": "integer",
			"ui:title": "CasparCG Latency",
			"ui:description": "Delay in ms before SDI signal hits the mixer",
			"ui:category": "Playback",
			"min": 0
		}
	},
	"required": [
		"previewRenderer",
		"casparcgLatency",
		"sisyfosSources",
		"vmixSources",
		"atemOutputs",
		"atemSources",
		"visionMixerType"
	]
}

================
File: src/studio0/customTypes.ts
================
/**
 * This file can be used to add additional types to some of the
 * interfaces that may change between blueprints such as
 * metadata etc.
 */
⋮----
import {
	IBlueprintActionManifestDisplay,
	IBlueprintActionManifestDisplayContent,
	OnGenerateTimelineObj,
	TSR,
	TimelineObjectCoreExt,
} from '@sofie-automation/blueprints-integration'
import { SetRequired } from 'type-fest'
⋮----
export interface PartEndStateExt {
	_customTypes: void // just here to satisfy the linter
}
⋮----
_customTypes: void // just here to satisfy the linter
⋮----
export interface TimelinePersistentStateExt {
	_customTypes: void // just here to satisfy the linter
}
⋮----
_customTypes: void // just here to satisfy the linter
⋮----
export interface TimelineObjectMetaData {
	_customTypes: void // just here to satisfy the linter
}
⋮----
_customTypes: void // just here to satisfy the linter
⋮----
export interface TimelineObjectKeyframeMetaData {
	_customTypes: void // just here to satisfy the linter
}
⋮----
_customTypes: void // just here to satisfy the linter
⋮----
export type TimelineBlueprintExt<T extends TSR.TSRTimelineContent = TSR.TSRTimelineContent> = TimelineObjectCoreExt<
	T,
	TimelineObjectMetaData,
	TimelineObjectKeyframeMetaData
>
export type OnTimelineGenerateBlueprintExt = TimelineBlueprintExt &
	OnGenerateTimelineObj<TSR.TSRTimelineContent, TimelineObjectMetaData, TimelineObjectKeyframeMetaData>
⋮----
export interface PieceMetaDataExt {
	_customTypes: void // just here to satisfy the linter
}
⋮----
_customTypes: void // just here to satisfy the linter
⋮----
export type AdLibActionDisplayContentExt = SetRequired<IBlueprintActionManifestDisplayContent, 'tags'>
export type AdLibActionDisplayExt = IBlueprintActionManifestDisplay

================
File: src/studio0/getBaseline.ts
================
import { BlueprintResultStudioBaseline, IStudioContext, TSR } from '@sofie-automation/blueprints-integration'
import { literal } from '../common/util'
import { AudioSourceType, StudioConfig } from './helpers/config'
import { SisyfosLayers } from './layers'
import { TimelineBlueprintExt } from './customTypes'
⋮----
function getSisyfosBaseline(config: StudioConfig): (TSR.SisyfosChannelOptions &
⋮----
const addChannelsFromType = (type: AudioSourceType)
⋮----
export function getBaseline(context: IStudioContext): BlueprintResultStudioBaseline

================
File: src/studio0/getShowStyleId.ts
================
import { IBlueprintShowStyleBase, IngestRundown, IStudioContext } from '@sofie-automation/blueprints-integration'
import { ReadonlyObjectDeep } from 'type-fest/source/readonly-deep'
⋮----
export function getShowStyleId(
	_context: IStudioContext,
	showStyles: ReadonlyObjectDeep<IBlueprintShowStyleBase[]>,
	_ingestRundown: IngestRundown
): string | null

================
File: src/studio0/index.ts
================
import {
	BlueprintManifestType,
	JSONBlobStringify,
	StudioBlueprintManifest,
} from '@sofie-automation/blueprints-integration'
import { getBaseline } from './getBaseline'
import { getShowStyleId } from './getShowStyleId'
// import { studioMigrations } from './migrations'
⋮----
import DefaultMappings, { AtemMappings } from './migrations/mappings-defaults'
import { StudioConfig } from '../generated/studio-config'
⋮----
declare const VERSION: string // Injected by webpack
declare const VERSION_TSR: string // Injected by webpack
declare const VERSION_INTEGRATION: string // Injected by webpack
declare const TRANSLATION_BUNDLES: string // injected by webpack

================
File: src/studio0/layers.ts
================
export enum AtemLayers {
	AtemMeProgram = 'atem_me_program',
	AtemMePreview = 'atem_me_preview',
	AtemDskGraphics = 'atem_dsk_graphics',
	AtemSuperSourceProps = 'atem_supersource_props',
	AtemSuperSourceBoxes = 'atem_supersource_boxes',
}
⋮----
export enum VMixLayers {
	VMixMeProgram = 'vmix_me_program',
	VMixMePreview = 'vmix_me_preview',
	VMixOverlayGraphics = 'vmix_overlay_graphics',
	VMixDVEMultiView = 'vmix_dve_multiview',
}
⋮----
export enum CasparCGLayers {
	CasparCGClipPlayer = 'casparcg_clip_player',
	CasparCGClipPlayerPreview = 'casparcg_clip_player_preview',
	CasparCGEffectsPlayer = 'casparcg_effects_player',

	CasparCGGraphicsLowerThird = 'casparcg_graphics_l3d',
	CasparCGGraphicsTicker = 'casparcg_graphics_ticker',
	CasparCGGraphicsStrap = 'casparcg_graphics_strap',
	CasparCGGraphicsLogo = 'casparcg_graphics_logo',
	CasparCGAudioBed = 'casparcg_audio_bed',
}
⋮----
export enum AsbtractLayers {
	CoreAbstract = 'core_abstract',
}
⋮----
export enum SisyfosLayers {
	Baseline = 'sisyfos_baseline',
	Primary = 'sisyfos_primary',
	Guests = 'sisyfos_guests',
	HostOverride = 'sisyfos_host_override',
	ForceMute = 'sisyfos_forceMute',
}

================
File: src/system/index.ts
================
import { BlueprintManifestType, SystemBlueprintManifest } from '@sofie-automation/blueprints-integration'
⋮----
declare const VERSION: string // Injected by webpack
declare const VERSION_TSR: string // Injected by webpack
declare const VERSION_INTEGRATION: string // Injected by webpack

================
File: src/webpack.d.ts
================
declare module '*.png' // PNG file format is handled by webpack
declare module '*.svg' // SVG file format is handled by webpack

================
File: .eslintrc.js
================


================
File: .repomixignore
================
*.svg
node_modules/
dist/

================
File: package.json
================
{
    "name": "blueprints",
    "version": "0.4.0",
    "repository": "https://github.com/superflytv/sofie-demo-blueprints/",
    "license": "MIT",
    "files": [],
    "scripts": {
        "build": "yarn test && yarn build-now",
        "dist": "yarn build && yarn bundle",
        "bundle": "ts-node scripts/bundle.ts",
        "build-now": "yarn run build-inner --env production",
        "build-inner": "webpack --config webpack.config.js",
        "build-sync-local": "yarn run build --env server=\"http://127.0.0.1:3000\"",
        "watch": "yarn run build-inner --watch",
        "watch-sync-local": "yarn run watch --env server=\"http://127.0.0.1:3000\"",
        "lint:raw": "eslint --ext .ts --ext .js --ext .tsx --ext .jsx --ignore-pattern dist",
        "lint": "yarn lint:raw .",
        "unit": "jest",
        "test": "yarn unit",
        "link-integration": "yarn link @sofie-automation/blueprints-integration",
        "translation:extract": "node scripts/translation/extract.js",
        "generate-schema-types": "node scripts/schema.mjs"
    },
    "devDependencies": {
        "@types/jest": "^28.1.4",
        "@types/node": "^14.18.21",
        "@types/object-path": "^0.11.1",
        "@types/underscore": "~1.11.4",
        "axios": "^0.27.2",
        "file-loader": "^6.2.0",
        "git-revision-webpack-plugin": "^5.0.0",
        "i18next-conv": "^10.2.0",
        "i18next-parser": "^3.11.0",
        "jest": "^28.1.2",
        "json-schema-to-typescript": "^13.1.1",
        "moment": "^2.29.3",
        "ts-jest": "^28.0.5",
        "ts-loader": "^9.4.1",
        "ts-node": "^10.9.1",
        "typescript": "~4.9.0",
        "vinyl-fs": "^3.0.3",
        "webpack": "^5.74.0",
        "webpack-cli": "^4.10.0"
    },
    "dependencies": {
        "@sofie-automation/blueprints-integration": "1.53.0-nightly-release53-20250423-081454-dc957dd.0",
        "object-path": "^0.11.8",
        "type-fest": "^4.9.0",
        "underscore": "^1.13.4"
    },
    "private": true,
    "engines": {
        "node": ">=22.0.0"
    }
}

================
File: tsconfig.build.json
================
{
	"extends": "@sofie-automation/code-standard-preset/ts/tsconfig.lib",
	"exclude": ["node_modules/**", "src/**/__tests__/*", "src/**/__mocks__/*", "dist/**"],
	"compilerOptions": {
		"outDir": "./dist",
		"baseUrl": "./",
		"paths": {
			"*": ["./node_modules/*"]
			// "sofie-blueprints": ["./src/index.ts"]
		},
		"declaration": false,
		"declarationMap": false,
		"types": ["node"],
		"resolveJsonModule": true
		// "noUncheckedIndexedAccess": true
	}
}

================
File: tsconfig.json
================
{
	"extends": "./tsconfig.build.json",
	"exclude": ["node_modules/**", "dist/**"],
	"compilerOptions": {
		"types": ["node", "jest"]
	}
}

================
File: webpack.config.js
================
/* eslint-disable node/no-unpublished-require */
⋮----
module.exports = async (env) => {
⋮----
const gitRevisionPlugin = new GitRevisionPlugin({
⋮----
versionStr = () => JSON.stringify(pkg.version + '+' + gitRevisionPlugin.version())
⋮----
versionStr = () => JSON.stringify(pkg.version + '+dev-' + moment().format('YYYYMMDD-HHmm'))
⋮----
if (!versionTSRTypes) throw Error('timeline-state-resolver-types version missing!')
if (!versionIntegration) throw Error('@sofie-automation/blueprints-integration version missing!')
⋮----
console.log(`Found versions:`)
console.log(`timeline-state-resolver-types: ${versionTSRTypes}`)
console.log(`@sofie-automation/blueprints-integration: ${versionIntegration}`)
⋮----
const entrypoints = env.bundle ? GetEntrypointsForBundle(env.bundle) : BlueprintEntrypoints
⋮----
const translations = await getTranslations(entrypoints)
⋮----
minimize: false, // This is to make it possible to read and apply hacky fixes to the deployed code as a last resort
// runtimeChunk: true,
⋮----
path: path.resolve(__dirname, './dist'),
⋮----
// This sets up the bundle as sofie expects to parse it
⋮----
new webpack.DefinePlugin({
VERSION: webpack.DefinePlugin.runtimeValue(versionStr),
VERSION_TSR: JSON.stringify(versionTSRTypes),
VERSION_INTEGRATION: JSON.stringify(versionIntegration),
TRANSLATION_BUNDLES: JSON.stringify(translations),
⋮----
apply: (compiler) => {
compiler.hooks.emit.tap('BundleAssets', (compilation) => {
assetBundler(env, compilation)
⋮----
compiler.hooks.emit.tap('UploadResult', (compilation) => {
uploader(env, compilation)



================================================================
End of Codebase
================================================================
