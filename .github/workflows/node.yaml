name: Node CI

on:
  push:
    branches:
      - '**'
    tags:
      - 'v**'
  pull_request:

jobs:
  lint:
    name: Typecheck and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        package:
          - blueprints
          - docs

    steps:
      - uses: actions/checkout@v5
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - name: restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Prepare Environment
        run: |
          corepack enable
          yarn
        env:
          CI: true
      - name: Run typecheck and linter
        run: |
          cd packages/${{ matrix.package }}
          yarn lint
          yarn build
        env:
          CI: true

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - name: restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Prepare Environment
        run: |
          corepack enable
          yarn
        env:
          CI: true
      - name: Run tests
        run: |
          cd packages/blueprints
          yarn test
        env:
          CI: true

  publish-docs:
    name: Publish Docs
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v5
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - name: Prepare Environment
        run: |
          corepack enable
          yarn
        env:
          CI: true
      - name: Run docusaurus
        run: |
          cd packages/docs
          yarn build
        env:
          CI: true
      - name: Publish
        if: github.ref == 'refs/heads/master' # always publish for just the master branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./packages/docs/build
          force_orphan: true

  build-deploy-image:
    name: Build Deploy Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # needs: [lint, test]

    env:
      # Use docker.io for Docker Hub if empty
      REGISTRY: ghcr.io
      # github.repository as <account>/<repo>
      IMAGE_NAME: ${{ github.repository }}

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v5

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
